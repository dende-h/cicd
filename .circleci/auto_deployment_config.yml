version: 2.1           

orbs:
  python: circleci/python@2.0.3
  ansible: orbss/ansible-playbook@0.0.5

parameters:
  run-development-terraform-build:
    type: boolean
    default: false
  run-circleci: 
    type: boolean
    default: false 
  run-terraform-destroy:
    type: boolean
    default: false #ここをtrueに変更後にPushするとterraform destroyを実施するジョブが走ります。
executors:
  terraform:
    docker:
      - image: hashicorp/terraform:1.5.7
  ansible:
    docker:
      - image: circleci/python

jobs:
# infrastructure as code
  plan:
    executor: terraform
    steps:
      - checkout
      - run:
          name: Terraform Plan
          command: |
            cd ./terraform/environments/development
            terraform init -backend-config="bucket=${TFSTATE_STORAGE}"
            terraform plan -out=plan-output.tfplan
            mkdir -p /tmp/workspace
            terraform show -json plan-output.tfplan > /tmp/workspace/plan-output.json
      - persist_to_workspace:
          root: /tmp/workspace
          paths: 
            - plan-output.json

  diff-check:
    executor: ansible
    steps:
      - checkout
      - attach_workspace:
          at: /tmp
      - run:
          name: Install jq
          command: sudo apt-get update && sudo apt-get install -y jq
      - run:
          name: Check for Changes
          command: |
            changes=$(jq '.resource_changes | length' /tmp/plan-output.json)
            if [ "$changes" -eq "0" ]; then
              echo "No changes detected. Exiting."
              circleci-agent step halt
            fi
      - run:
          command: echo "Resource changes exist."

  apply:
    executor: terraform
    steps:
      - checkout
      - run:
          name: Terraform Apply
          command: |
            cd ./terraform/environments/development
            terraform init -backend-config="bucket=${TFSTATE_STORAGE}"
            terraform apply -auto-approve 
            # Terraformのアウトプットを取得
            mkdir -p /tmp/workspace
            echo $(terraform output -json) > /tmp/workspace/terraform-outputs.json
      - persist_to_workspace:
          root: /tmp/workspace
          paths: 
            - terraform-outputs.json
  
  destroy:
    executor: terraform
    steps:
      - checkout
      - run:
          name: Terraform Destroy
          command: |
            cd ./terraform/environments/development
            terraform init
            terraform destroy -auto-approve 

  # setup-ec2
  ansible-playbook:
    executor: ansible
    parameters:
      version:
        description: |
          Ansible version
        type: string
        default: ''
      playbook-options:
        description: |
          Ansible-playbook command options
        type: string
        default: ''
      playbook:
        description: |
          The path of Ansible playbook
        type: string
    steps:
      - checkout
      - attach_workspace:
          at: /tmp
      - run:
          name: Install jq
          command: sudo apt-get update && sudo apt-get install -y jq
      - run:
          name: Set environment variable from JSON
          command: |
            echo 'export TF_OUTPUT_EC2_IP=$(jq -r ".output_ec2_public_ip.value" /tmp/terraform-outputs.json)' >> $BASH_ENV
      - add_ssh_keys:
          fingerprints:
            - "${KEY_FINGERPRINT}"
      - run:
          name: Add EC2 to known hosts
          command: ssh-keyscan ${TF_OUTPUT_EC2_IP} >> ~/.ssh/known_hosts
      - run:
          name: Replace inventory template with actual values
          command: |
            sed -i "s/<TF_OUTPUT_EC2_IP>/${TF_OUTPUT_EC2_IP}/" ./ansible/inventories/development/hosts
      - ansible/install:
          version: <<parameters.version>>
      - ansible/playbook:
          playbook-options: <<parameters.playbook-options>>
          playbook: <<parameters.playbook>>         

  # app-deploy
  sample-app-deploy:
    executor: ansible
    parameters:
      version:
        description: |
          Ansible version
        type: string
        default: ''
      playbook-options:
        description: |
          Ansible-playbook command options
        type: string
        default: ''
      playbook:
        description: |
          The path of Ansible playbook
        type: string
    steps:
      - checkout
      - attach_workspace:
          at: /tmp
      - add_ssh_keys:
          fingerprints:
            - "${KEY_FINGERPRINT}"
      - run:
          name: Install jq
          command: sudo apt-get update && sudo apt-get install -y jq
      - run:
          name: Set environment variable from JSON
          command: |
            echo 'export TF_OUTPUT_EC2_IP=$(jq -r ".output_ec2_public_ip.value" /tmp/terraform-outputs.json)' >> $BASH_ENV
            echo 'export TF_OUTPUT_RDS_ENDPOINT=$(jq -r ".rds_endpoint.value" /tmp/terraform-outputs.json)' >> $BASH_ENV
            echo 'export TF_OUTPUT_RDS_PASSWORD=$(jq -r ".rds_password.value" /tmp/terraform-outputs.json)' >> $BASH_ENV
      - run:
          name: Add EC2 to known hosts
          command: ssh-keyscan ${TF_OUTPUT_EC2_IP} >> ~/.ssh/known_hosts
      - run:
          name: Replace inventory template with actual values
          command: |
            sed -i "s/<TF_OUTPUT_EC2_IP>/${TF_OUTPUT_EC2_IP}/" ./ansible/inventories/development/hosts
      - ansible/install:
          version: <<parameters.version>>
      - ansible/playbook:
          playbook-options: <<parameters.playbook-options>>
          playbook: <<parameters.playbook>>

  # cfn-lint:
  #   executor: python/default
  #   steps:
  #     - checkout
  #     - run: pip install cfn-lint
  #     - run:
  #         name: run cfn-lint
  #         command: |
  #           cfn-lint -i W3002 -t cloudformation/*.yml

  # server-test
  server_spec:
    docker:
      - image: circleci/ruby
    steps:
      - checkout
      - attach_workspace:
          at: /tmp
      - run:
          name: Install jq
          command: sudo apt-get update && sudo apt-get install -y jq
      - run:
          name: Set environment variable from JSON
          command: |
            echo 'export TARGET_HOST=$(jq -r ".output_ec2_public_ip.value" /tmp/terraform-outputs.json)' >> $BASH_ENV
            echo 'export ALB_ENDPOINT=$(jq -r ".output_alb_endpoint.value" /tmp/terraform-outputs.json)' >> $BASH_ENV
            echo 'export RDS_ENDPOINT=$(jq -r ".rds_endpoint.value" /tmp/terraform-outputs.json)' >> $BASH_ENV
            echo 'export S3_NAME=$(jq -r ".s3_bucket_name.value" /tmp/terraform-outputs.json)' >> $BASH_ENV
      - run:
          name: Change ServerSpec host folder name
          command: bash ./shell/change_folder_name.sh
      - run:
          name: Setup Serverspec
          command: |
            cd ./ServerSpec
            gem install serverspec rake ed25519 bcrypt_pbkdf
      - run:
          name: Run Serverspec Tests
          command: |
            cd ./ServerSpec
            rake spec


workflows:
  # devブランチでdestroyパラメータがfalseかつ、terraformかCircleCIの設定ファイルに変更が合った時に走るワークフロー
  terraform-plan:
    when: 
      and:
        - not: <<pipeline.parameters.run-terraform-destroy>>
        - or: [<< pipeline.parameters.run-development-terraform-build >>,<< pipeline.parameters.run-circleci >>]
    jobs:
      - plan: 
          filters:  
            branches:
              only:
                - dev
      - diff-check:
          requires:
            - plan
          filters:  
            branches:
              only:
                - dev    
  # mainブランチでdestroyパラメータがfalseかつ、terraformかCircleCIの設定ファイルに変更が合った時に走るワークフロー
  terraform-build-and-deploy:
    when: 
      and:
        - not: <<pipeline.parameters.run-terraform-destroy>>
        - or: [<< pipeline.parameters.run-development-terraform-build >>,<< pipeline.parameters.run-circleci >>]
    jobs:
      - plan: 
          filters:  
            branches:
              only:
                - main        
      - apply:
          requires:
            - plan
          filters:  
            branches:
              only:
                - main
      - ansible-playbook:
          version: "2.10.7"
          playbook-options: '-i ./ansible/inventories/development/hosts'
          playbook:  ./ansible/playbooks/ec2_deploy.yml
          requires:
            - apply
          filters:   
            branches:
              only:
                - main
      - sample-app-deploy:
          version: "2.10.7"
          playbook-options: '-i ./ansible/inventories/development/hosts'
          playbook:  ./ansible/playbooks/ec2_deploy2.yml
          requires:
            - ansible-playbook
          filters:   
            branches:
              only:
                - main
      - server_spec:
          requires:
            - sample-app-deploy
          filters:   
            branches:
              only:
                - main

  # # when pipeline parameter, run-raisetech-sample-config is true, the
  # # job is triggered.
  # sample-jobs:
  #   when: << pipeline.parameters.run-raisetech-sample-config >>
  #   jobs:
  #     - cfn-lint
  
  # destroyのパラメータをtrueにすると走るパラメータ
  terraform-destroy:
    when: << pipeline.parameters.run-terraform-destroy >>
    jobs:
      - destroy
